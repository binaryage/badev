///
/// Common settings that should be enabled for every project
///

// sane defaults taken from https://github.com/jspahrsummers/xcconfigs

// Whether to warn when a floating-point value is used as a loop counter
CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER = YES

// Whether to warn about use of rand() and random() being used instead of arc4random()
CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES

// Whether to warn about strcpy() and strcat()
CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY = YES

// Enable ARC
CLANG_ENABLE_OBJC_ARC = YES

// Warn about implicit conversions to boolean values that are suspicious.
// For example, writing 'if (foo)' with 'foo' being the name a function will trigger a warning.
CLANG_WARN_BOOL_CONVERSION = YES

// Warn about implicit conversions of constant values that cause the constant value to change,
// either through a loss of precision, or entirely in its meaning.
CLANG_WARN_CONSTANT_CONVERSION = YES

// Whether to warn when overriding deprecated methods
CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES

// Warn about declaring the same method more than once within the same @interface.
CLANG_WARN__DUPLICATE_METHOD_MATCH = YES

// Warn about loop bodies that are suspiciously empty.
CLANG_WARN_EMPTY_BODY = YES

// Warn about implicit conversions between different kinds of enum values.
// For example, this can catch issues when using the wrong enum flag as an argument to a function or method.
CLANG_WARN_ENUM_CONVERSION = YES

// Whether to warn on implicit conversions between signed/unsigned types
//CLANG_WARN_IMPLICIT_SIGN_CONVERSION = NO

// Warn about implicit conversions between pointers and integers.
// For example, this can catch issues when one incorrectly intermixes using NSNumbers and raw integers.
CLANG_WARN_INT_CONVERSION = YES

// Don't warn about repeatedly using a weak reference without assigning the weak reference to a strong reference.
// Too many false positives.
CLANG_WARN_OBJC_REPEATED_USE_OF_WEAK = YES

// Warn about implicit retains of 'self' within blocks, which can create a retain-cycle.
CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES

// Warn about implicit ownership types on Objective-C object references as out parameters.
// For example, declaring a parameter with type 'NSObject**' will produce a warning because the compiler will assume that
// the out parameter's ownership type is '__autoreleasing'.
CLANG_WARN_OBJC_EXPLICIT_OWNERSHIP_TYPE = YES

// Whether to warn on suspicious implicit conversions
//CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES

// Warn if a variable might be clobbered by a setjmp call or if an automatic variable is used without prior initialization.
GCC_WARN_UNINITIALIZED_AUTOS = YES

// The format of debugging symbols
DEBUG_INFORMATION_FORMAT = dwarf-with-dsym

// Which C variant to use
GCC_C_LANGUAGE_STANDARD = gnu99

// Whether to precompile the prefix header (if one is specified)
GCC_PRECOMPILE_PREFIX_HEADER = YES

// Whether static variables are thread-safe by default
GCC_THREADSAFE_STATICS = NO

// Which compiler to use
GCC_VERSION = com.apple.compilers.llvm.clang.1_0

// Whether to warn about 64-bit values being implicitly shortened to 32 bits
GCC_WARN_64_TO_32_BIT_CONVERSION = YES

// Whether to warn about fields missing from structure initializers (only if
// designated initializers aren't used)
GCC_WARN_ABOUT_MISSING_FIELD_INITIALIZERS = YES

// Whether to warn when the value returned from a function/method/block does not
// match its return type
GCC_WARN_ABOUT_RETURN_TYPE = YES

// Whether to warn about the use of four-character constants
//GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES

// Whether to warn about an aggregate data type's initializer not being fully
// bracketed (e.g., array initializer syntax)
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES

// Whether to warn about unsafe comparisons between values of different
// signedness
//GCC_WARN_SIGN_COMPARE = YES

// Warn if a "@selector(...)" expression referring to an undeclared selector is found
//GCC_WARN_UNDECLARED_SELECTOR = YES

// Whether to warn about variables that are not initialized before being used
GCC_WARN_UNINITIALIZED_AUTOS = YES

// Whether to warn about static functions that are unused
GCC_WARN_UNUSED_FUNCTION = YES

// Whether to warn about labels that are unused
GCC_WARN_UNUSED_LABEL = YES

// Whether to warn about variables that are never used
GCC_WARN_UNUSED_VARIABLE = YES

// Warn when a class declares an nonvirtual destructor that should probably be virtual, because it looks like the class
// will be used polymorphically. This is only active for C++ or Objective-C++ sources.
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES

// these warnings were recommended by Xcode 8.2
CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;
CLANG_WARN_INFINITE_RECURSION = YES;
CLANG_WARN_SUSPICIOUS_MOVE = YES;
CLANG_WARN_UNREACHABLE_CODE = YES;
ENABLE_STRICT_OBJC_MSGSEND = YES;
//GCC_NO_COMMON_BLOCKS = YES;
GCC_WARN_UNUSED_VARIABLE = YES;

// Disable GCC compatibility warnings
<% 

flags = $shared['WARNING_CFLAGS']
flags << '-Wextra'
flags << '-Wself-assign'
flags << '-Wno-gcc-compat'
flags << '-Wno-unused-parameter'
flags << '-Wstrict-prototypes'
flags << '-Wunreachable-code'
flags << '-Wunused-member-function'
flags << '-Wuninitialized'
flags << '-Wsuper-class-method-mismatch'
flags << '-Warc'
flags << '-Warc-retain-cycles'
flags << '-Warc-unsafe-retained-assign'
flags << '-Warc-non-pod-memaccess'
flags << '-Wbind-to-temporary-copy'
flags << '-Wno-nonportable-include-path'

%>

// Disable legacy-compatible header searching
ALWAYS_SEARCH_USER_PATHS = NO

PRODUCT_NAME = <%=@target%>
